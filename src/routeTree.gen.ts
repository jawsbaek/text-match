/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as authenticatedRouteRouteImport } from "./routes/(authenticated)/route";
import { Route as authPagesRouteRouteImport } from "./routes/(auth-pages)/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as authPagesSignupRouteImport } from "./routes/(auth-pages)/signup";
import { Route as authPagesLoginRouteImport } from "./routes/(auth-pages)/login";
import { Route as authenticatedDashboardRouteRouteImport } from "./routes/(authenticated)/dashboard/route";
import { Route as authenticatedDashboardIndexRouteImport } from "./routes/(authenticated)/dashboard/index";
import { ServerRoute as ApiKeysIndexServerRouteImport } from "./routes/api/keys/index";
import { ServerRoute as ApiTranslationsIdServerRouteImport } from "./routes/api/translations/$id";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";

const rootServerRouteImport = createServerRootRoute();

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: "/(authenticated)",
  getParentRoute: () => rootRouteImport,
} as any);
const authPagesRouteRoute = authPagesRouteRouteImport.update({
  id: "/(auth-pages)",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const authPagesSignupRoute = authPagesSignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => authPagesRouteRoute,
} as any);
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authPagesRouteRoute,
} as any);
const authenticatedDashboardRouteRoute =
  authenticatedDashboardRouteRouteImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => authenticatedRouteRoute,
  } as any);
const authenticatedDashboardIndexRoute =
  authenticatedDashboardIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => authenticatedDashboardRouteRoute,
  } as any);
const ApiKeysIndexServerRoute = ApiKeysIndexServerRouteImport.update({
  id: "/api/keys/",
  path: "/api/keys/",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiTranslationsIdServerRoute = ApiTranslationsIdServerRouteImport.update({
  id: "/api/translations/$id",
  path: "/api/translations/$id",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof authenticatedRouteRouteWithChildren;
  "/dashboard": typeof authenticatedDashboardRouteRouteWithChildren;
  "/login": typeof authPagesLoginRoute;
  "/signup": typeof authPagesSignupRoute;
  "/dashboard/": typeof authenticatedDashboardIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof authenticatedRouteRouteWithChildren;
  "/login": typeof authPagesLoginRoute;
  "/signup": typeof authPagesSignupRoute;
  "/dashboard": typeof authenticatedDashboardIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/(auth-pages)": typeof authPagesRouteRouteWithChildren;
  "/(authenticated)": typeof authenticatedRouteRouteWithChildren;
  "/(authenticated)/dashboard": typeof authenticatedDashboardRouteRouteWithChildren;
  "/(auth-pages)/login": typeof authPagesLoginRoute;
  "/(auth-pages)/signup": typeof authPagesSignupRoute;
  "/(authenticated)/dashboard/": typeof authenticatedDashboardIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/dashboard" | "/login" | "/signup" | "/dashboard/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/login" | "/signup" | "/dashboard";
  id:
    | "__root__"
    | "/"
    | "/(auth-pages)"
    | "/(authenticated)"
    | "/(authenticated)/dashboard"
    | "/(auth-pages)/login"
    | "/(auth-pages)/signup"
    | "/(authenticated)/dashboard/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  authPagesRouteRoute: typeof authPagesRouteRouteWithChildren;
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren;
}
export interface FileServerRoutesByFullPath {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/translations/$id": typeof ApiTranslationsIdServerRoute;
  "/api/keys": typeof ApiKeysIndexServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/translations/$id": typeof ApiTranslationsIdServerRoute;
  "/api/keys": typeof ApiKeysIndexServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/translations/$id": typeof ApiTranslationsIdServerRoute;
  "/api/keys/": typeof ApiKeysIndexServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: "/api/auth/$" | "/api/translations/$id" | "/api/keys";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: "/api/auth/$" | "/api/translations/$id" | "/api/keys";
  id: "__root__" | "/api/auth/$" | "/api/translations/$id" | "/api/keys/";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
  ApiTranslationsIdServerRoute: typeof ApiTranslationsIdServerRoute;
  ApiKeysIndexServerRoute: typeof ApiKeysIndexServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(authenticated)": {
      id: "/(authenticated)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authenticatedRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth-pages)": {
      id: "/(auth-pages)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authPagesRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth-pages)/signup": {
      id: "/(auth-pages)/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof authPagesSignupRouteImport;
      parentRoute: typeof authPagesRouteRoute;
    };
    "/(auth-pages)/login": {
      id: "/(auth-pages)/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof authPagesLoginRouteImport;
      parentRoute: typeof authPagesRouteRoute;
    };
    "/(authenticated)/dashboard": {
      id: "/(authenticated)/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof authenticatedDashboardRouteRouteImport;
      parentRoute: typeof authenticatedRouteRoute;
    };
    "/(authenticated)/dashboard/": {
      id: "/(authenticated)/dashboard/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof authenticatedDashboardIndexRouteImport;
      parentRoute: typeof authenticatedDashboardRouteRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/keys/": {
      id: "/api/keys/";
      path: "/api/keys";
      fullPath: "/api/keys";
      preLoaderRoute: typeof ApiKeysIndexServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/translations/$id": {
      id: "/api/translations/$id";
      path: "/api/translations/$id";
      fullPath: "/api/translations/$id";
      preLoaderRoute: typeof ApiTranslationsIdServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface authPagesRouteRouteChildren {
  authPagesLoginRoute: typeof authPagesLoginRoute;
  authPagesSignupRoute: typeof authPagesSignupRoute;
}

const authPagesRouteRouteChildren: authPagesRouteRouteChildren = {
  authPagesLoginRoute: authPagesLoginRoute,
  authPagesSignupRoute: authPagesSignupRoute,
};

const authPagesRouteRouteWithChildren = authPagesRouteRoute._addFileChildren(
  authPagesRouteRouteChildren,
);

interface authenticatedDashboardRouteRouteChildren {
  authenticatedDashboardIndexRoute: typeof authenticatedDashboardIndexRoute;
}

const authenticatedDashboardRouteRouteChildren: authenticatedDashboardRouteRouteChildren =
  {
    authenticatedDashboardIndexRoute: authenticatedDashboardIndexRoute,
  };

const authenticatedDashboardRouteRouteWithChildren =
  authenticatedDashboardRouteRoute._addFileChildren(
    authenticatedDashboardRouteRouteChildren,
  );

interface authenticatedRouteRouteChildren {
  authenticatedDashboardRouteRoute: typeof authenticatedDashboardRouteRouteWithChildren;
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedDashboardRouteRoute:
    authenticatedDashboardRouteRouteWithChildren,
};

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authPagesRouteRoute: authPagesRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTranslationsIdServerRoute: ApiTranslationsIdServerRoute,
  ApiKeysIndexServerRoute: ApiKeysIndexServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
